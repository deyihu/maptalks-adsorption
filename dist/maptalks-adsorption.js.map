{"version":3,"file":"maptalks-adsorption.js","sources":["../index.js"],"sourcesContent":["import * as maptalks from 'maptalks';\r\n\r\nconst options = {\r\n    // adsorb threshold\r\n    tolerance: 15,\r\n    // filter geometries for get Adsorption reference object\r\n    fiterGeometries: null\r\n};\r\n\r\nconst TEMP_POINT = new maptalks.Point(0, 0),\r\n    TEMP_POINT1 = new maptalks.Point(0, 0);\r\n\r\nfunction coordinateToContainerPoint(coordinate, map, out) {\r\n    return map.coordToContainerPoint(coordinate, null, out);\r\n}\r\n\r\nconst TEMP_LINE = [[0, 0], [0, 0]], TEMP_MOUSEPOINT = [0, 0];\r\n// code from https://zhuanlan.zhihu.com/p/408786267\r\nfunction getShortestPointInLine(line, p) {\r\n    const p1 = line[0];\r\n    const p2 = line[1];\r\n    const dx = p2[0] - p1[0];\r\n    const dy = p2[1] - p1[1];\r\n    const cross = dx * (p[0] - p1[0]) + dy * (p[1] - p1[1]);\r\n    if (cross <= 0) {\r\n        return p1;\r\n    }\r\n    const d2 = dx * dx + dy * dy;\r\n    if (cross >= d2) {\r\n        return p2;\r\n    }\r\n    // 垂足\r\n    const u = cross / d2;\r\n    TEMP_POINT.x = (p1[0] + u * dx);\r\n    TEMP_POINT.y = (p1[1] + u * dy);\r\n    return TEMP_POINT;\r\n}\r\n\r\nexport class Adsorption extends maptalks.Class {\r\n    constructor(map, options) {\r\n        super(options);\r\n        this.map = map;\r\n        this._mousePoint = null;\r\n        this.map.on('mousemove', this._mouseMove, this);\r\n    }\r\n\r\n    _mouseMove(e) {\r\n        this._mousePoint = e.containerPoint;\r\n        return this;\r\n    }\r\n\r\n    _validateMousePosition(point) {\r\n        return (this._mousePoint && this._mousePoint.distanceTo(point) <= this.options.tolerance + 5);\r\n    }\r\n\r\n    setGeometry(geometry) {\r\n        this.removeGeometry();\r\n        this.geometry = geometry;\r\n\r\n        const adsorb = (handleConatainerPoint) => {\r\n            if (!handleConatainerPoint) {\r\n                return;\r\n            }\r\n            let geometries;\r\n            const fiterGeometries = this.options.fiterGeometries;\r\n            if (fiterGeometries && maptalks.Util.isFunction(fiterGeometries)) {\r\n                geometries = fiterGeometries();\r\n            }\r\n            if (!geometries || geometries.length === 0) {\r\n                const layer = this.geometry.getLayer();\r\n                geometries = layer.getGeometries().filter(geo => {\r\n                    return geo !== this.geometry;\r\n                });\r\n            }\r\n            return this._nearest(geometries, handleConatainerPoint);\r\n        };\r\n        // bind adsort function\r\n        this.geometry.adsorb = adsorb;\r\n        return this;\r\n    }\r\n\r\n    removeGeometry() {\r\n        if (this.geometry) {\r\n            delete this.geometry.adsorb;\r\n        }\r\n        delete this.geometry;\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.removeGeometry();\r\n        this.map.off('mousemove', this._mouseMove, this);\r\n        delete this.map;\r\n        delete this._mousePoint;\r\n    }\r\n\r\n    _nearest(geometries, handleConatainerPoint) {\r\n        geometries = this._sortGeometries(geometries, handleConatainerPoint);\r\n        for (let i = 0, len = geometries.length; i < len; i++) {\r\n            if (geometries[i] === this.geometry) {\r\n                continue;\r\n            }\r\n            const point = this._nearestGeometry(geometries[i], handleConatainerPoint);\r\n            if (point) {\r\n                return point;\r\n            }\r\n        }\r\n        return this._mousePoint && this._mousePoint.copy();\r\n    }\r\n\r\n    _nearestGeometry(geometry, handleConatainerPoint) {\r\n        // multi geometry\r\n        if (geometry.getGeometries) {\r\n            const geometries = geometry.getGeometries();\r\n            for (let i = 0, len = geometries.length; i < len; i++) {\r\n                const point = this._nearestGeometry(geometries[i], handleConatainerPoint);\r\n                if (point) {\r\n                    return point;\r\n                }\r\n            }\r\n        }\r\n        const tolerance = Math.max(this.options.tolerance, 1);\r\n        const coordinates = geometry.getCoordinates();\r\n        const isNearest = (point) => {\r\n            return handleConatainerPoint.distanceTo(point) <= tolerance && this._validateMousePosition(point);\r\n        };\r\n        if (geometry instanceof maptalks.Marker) {\r\n            const point = coordinateToContainerPoint(coordinates, this.map, TEMP_POINT);\r\n            if (isNearest(point)) {\r\n                return point.copy();\r\n            }\r\n        }\r\n\r\n        const nearestRing = (ring) => {\r\n            const len = ring.length;\r\n            let i = 0;\r\n            for (; i < len - 1; i++) {\r\n                const coordinate = ring[i];\r\n                const point = coordinateToContainerPoint(coordinate, this.map, TEMP_POINT);\r\n                if (isNearest(point)) {\r\n                    return point.copy();\r\n                }\r\n                const coordinate1 = ring[i + 1];\r\n                const point1 = coordinateToContainerPoint(coordinate1, this.map, TEMP_POINT1);\r\n                if (isNearest(point1)) {\r\n                    return point1.copy();\r\n                }\r\n                TEMP_LINE[0][0] = point.x;\r\n                TEMP_LINE[0][1] = point.y;\r\n                TEMP_LINE[1][0] = point1.x;\r\n                TEMP_LINE[1][1] = point1.y;\r\n                TEMP_MOUSEPOINT[0] = handleConatainerPoint.x;\r\n                TEMP_MOUSEPOINT[1] = handleConatainerPoint.y;\r\n\r\n                const linePoint = getShortestPointInLine(TEMP_LINE, TEMP_MOUSEPOINT);\r\n                if (isNearest(linePoint)) {\r\n                    return linePoint.copy();\r\n                }\r\n            }\r\n        };\r\n        if (geometry instanceof maptalks.LineString) {\r\n            const point = nearestRing(coordinates);\r\n            if (point) {\r\n                return point.copy();\r\n            }\r\n        }\r\n        if (geometry instanceof maptalks.Polygon) {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                const point = nearestRing(coordinates[i]);\r\n                if (point) {\r\n                    return point.copy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _sortGeometries(geometries, handleConatainerPoint) {\r\n        const map = this.map;\r\n        geometries.forEach(geo => {\r\n            const center = geo.getCenter();\r\n            if (!center) {\r\n                return;\r\n            }\r\n            const containerPoint = coordinateToContainerPoint(center, map);\r\n            geo._distance = handleConatainerPoint.distanceTo(containerPoint);\r\n        });\r\n        return geometries.sort((geo1, geo2) => {\r\n            return geo1._distance - geo2._distance;\r\n        });\r\n    }\r\n\r\n}\r\nAdsorption.mergeOptions(options);\r\n"],"names":["maptalks.Point","maptalks.Class","maptalks.Util","maptalks.Marker","maptalks.LineString","maptalks.Polygon"],"mappings":"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"}